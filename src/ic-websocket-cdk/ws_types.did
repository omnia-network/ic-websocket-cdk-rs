type ClientPublicKey = blob;

type DirectClientMessage = record {
  client_key : ClientPublicKey;
  message : blob;
};

type RelayedClientMessage = record {
  content : blob;
  sig : blob;
};

type GatewayStatusMessage = record {
  status_index : nat64;
};

type CanisterIncomingMessage = variant {
  DirectlyFromClient : DirectClientMessage;
  RelayedByGateway : RelayedClientMessage;
  IcWebSocketEstablished : ClientPublicKey;
  IcWebSocketGatewayStatus : GatewayStatusMessage;
};

type CanisterOutputMessage = record {
  client_key : ClientPublicKey;
  content : blob;
  key : text;
};

type CanisterOutputCertifiedMessages = record {
  messages : vec CanisterOutputMessage;
  cert : blob;
  tree : blob;
};

type CanisterWsRegisterArguments = record {
  client_key : ClientPublicKey;
};

type CanisterWsRegisterResult = variant {
  Ok : null;
  Err : text;
};

type CanisterWsOpenArguments = record {
  content : blob;
  sig : blob;
};

type CanisterWsOpenResultValue = record {
  client_key : ClientPublicKey;
  canister_id : principal;
  nonce : nat64;
};

type CanisterWsOpenResult = variant {
  Ok : CanisterWsOpenResultValue;
  Err : text;
};

type CanisterWsCloseArguments = record {
  client_key : ClientPublicKey;
};

type CanisterWsCloseResult = variant {
  Ok : null;
  Err : text;
};

type CanisterWsMessageArguments = record {
  msg : CanisterIncomingMessage;
};

type CanisterWsMessageResult = variant {
  Ok : null;
  Err : text;
};

type CanisterWsGetMessagesArguments = record {
  nonce : nat64;
};

type CanisterWsGetMessagesResult = variant {
  Ok : CanisterOutputCertifiedMessages;
  Err : text;
};
